S 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tianjie Dong <dongtj@ccs.neu.edu>
Jiahua Liu <willard@ccs.neu.edu>
Xinyuan Wang <alexwang@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----
>> Copy here the declaration of each new or changed `struct' or `struct'
>> member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 25 words or less.

Add a new list in timer.c:
A sleep_list is a list in which contains all the threads that are sleeping 
and waiting for being awake. The list is in order of ticks

/* a list take record threads in sleep */
static struct list sleep_list;

Added to struct thread:
A ticks is a 64bit integer that record the time when this thread should be
wake up.

/* the ticks when this thread should wake up*/
int64_t ticks;

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

In a call to timer_sleep(): 
(1) If the input is no bigger than 0, the program will return.
(2) Else the current running thread will be blocked and push into sleep_list
and record its wake up time.
The timer interrupt handler calls awake_sleepers() to wake the sleeping threads up.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

(1) In the timer_sleep(),when the sleeping threads are pushed into sleep_list, 
they are placed in increasing order of their variable: ticks.
(2) When the interrupt handler check each threads' awake time in sleep_list, 
it will continue check the next one only if this thread can be wake up. Once 
it finds a thread whose ticks is bigger than current time. it will stop 
checking the next one and jump out of the loop. So there is no need to look  
through the whole list. That minimize the amount of time.
---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

When a thread calls timer_sleep(), the interrupt will be disabled, so no other
threads can call timer_sleep() simultaneously.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

During a call to timer_sleep(), all the interrupt will be diabled, so it avoid
a timer interrupt occurs in the first place.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We considered the design in the slides, but this design is better than the
design in the slides in two ways:
(1) Less changes. We don't need to add extra status in the threads status.
(2) More effecient. The ordered sleeping list minimize the searching time in 
awake_sleepers, so it can be more effecient.
 
			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
init_priority is used to record the real priority of this thread,
the given priority is used to record the priority after donation.

 int init_priority;                  /* Original priority*/

 /* this is the element for donation list*/
 struct list_elem wait_elem;

 /* The list of all threads that are blocked by this thread,
    because this thread holds some resources they need */
 struct list wait_list;

 /* this one record a locker for which this thread is waitting*/
 struct lock *lock_to_wait;

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)
		   (struct thread)
		+---donation list----+
		|    donor threads'  |
		|    wait_elem       |
		|                    |
		| (In the order of   |
		|  priority decrease)|
		|                    |
		+--------------------+
---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When inserting a thread to the wait_list of a lock, semaphore or condition,
this thread will be inserted in the right place that make the list in 
decreasing order of each thread's priority. In that way, it ensures that the
highest prority thread wakes up first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

(1) Add the thread to lock holder's donation list.
(2) Check the thread's priority to  adjust the holder's priority.

To handle the nested donation, we set up a loop to donate current thread's
to its holder and its holder's holder, etc. When the depth of nested donation
is deeper than MAX_DEPTH, it will stop the loop.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

(1) The thread check it's donation list and remove all the donater who 
require this lock.
(2) The higher thread who requrie this lock holds the lock.
---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

When runing thread_set_priority(), if there comes a intrrupt that block the 
priority setting process, this thread could be given another priority.

The way to avoid it is to disable the interrupt when running the 
thread_set_priority().
---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We choose this design is because this design is effecient. Just pop
the first element in the waiting list, this thread has the highest priority.
This is because the waiting list is sorted when the threads are inserted. In
this way it saves the time for searching for the highest priority thread. 
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
