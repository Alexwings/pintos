S 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tianjie Dong <dongtj@ccs.neu.edu>
Jiahua Liu <willard@ccs.neu.edu>
Xinyuan Wang <alexwang@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----
>> Copy here the declaration of each new or changed `struct' or `struct'
>> member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 25 words or less.

ANSWER:

/* Added a new field ticks in structure thread in thread.h*/

struct thread
{
  ...
  int64_t ticks;
  ...
}

The field ticks is a 64-bit integer that records the time when this thread should be waken up.

/* Added sleep_list in timer.c */

static struct list sleep_list;

sleep_list is a list which contains all the threads that were put to state THREAD_BLOCKED by timer_sleep(). The list is always sorted by ticks, which is the time when this thread should wake up.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

ANSWER:

In a call to timer_sleep(): 
(1) If the input is no greater than 0, the program will return.
(2) Else the currently running thread will become blocked, with its field ticks properly set. Then it will be pushed into sleep_list in order of its field ticks.
Besides, the interrupt is disabled during these operations.

In the timer interrupt handler:
(1) It calls awake_sleepers(), which wakes up all the threads in sleep_list whose field ticks has already come. The function removes these threads from sleep_list and puts them into ready_list in order of priority. 
(2) Then it calls thread_tick(), which then may call intr_yield_on_return() to check if the current thread needs to yield.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

(1) In timer_sleep(), a thread is pushed into sleep_list in increasing order of its field ticks.

(2) In the timer interrupt handler, sleep_list is already sorted by field ticks of each thread, so that the loop will break once it meets the first thread in the list whose field ticks is greater than the current timer ticks. Therefore, the new ways of implementation saves the trouble of traversing the whole list and thus saves time.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

When a thread calls timer_sleep(), the interrupt will be disabled, so no other threads can call timer_sleep() simultaneously.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

During a call to timer_sleep(), all the interrupt will be disabled, so it prevents a timer interrupt from occurring in the first place.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


We considered the design in the slides and then came up with this final design. We evaluated and compared both designs and decided that our final design is superior in the following ways:
(1) Less changes. For one thing, We don't need to add an extra thread state THREAD_SLEEPING, as the design in the slides did. For another, changes in function schedule() may affect the behaviour of other functions that call schedule(). Therefore final design did not change function schedule().
(2) More effeciency. The final design minimizes the time spent in the timer interrupt handler by maintaining a sleep_list sorted by ticks.

 
			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

ANSWER:

/******* New and changed fields in structure thread in thread.h *******/

/* Initial thread priority before priority donation*/
 int init_priority;                  

 /* The list of all threads that are blocked by this thread,
    because this thread holds some resources they need */
 struct list wait_list;

 /* this is the element for donation list */
 struct list_elem wait_elem;

 /* The locker that this thread is waiting for */
 struct lock *lock_to_wait;

 /* Now priority records the highest priority amongst the thread and its 
    donations */
 int priority;

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

     ask      -------  held by      ask     -------   held by
  A -------->| lock1 | -------> B -------->| lock2 | --------> C
              -------                       -------
  A, B, C are threads, lock1, lock2 are locks

  A is asking for lock 1, which is held by B
  B is asking for lock 2, which is held by C
  
  the data structure is like:
  In C wait_list, there are B and A
  In B wait_list, there is one thread A
  In A wait_list, there are no thread to donate

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When pushing a thread into the wait_list of a lock, semaphore or condition, we make sure that this thread will be inserted into the right place according to its priority. Therefore we can maintain the wait_list that is sorted by priority. Therefore, the thread of highest priority will always be the first element in the list and thus be first waken up.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

  If this thread can't get the lock
  (1) current thread would record this lock in lock-to-wait  
  (2) Insert current to the donation list of lock-holder
  (3) Jump to priority donation.

  in priority donation
  (1) If the donator has no lock to wait or donator's priority lower
      than the lock holder, return
      If function loops over time limit, reutrn to pervent deadlock
  (2) else donator will send his priority to lock holder, than the lock
      Holder become new donator and keep looping

   When current get the lock, set current thread as lock holder, then reset
   current thread's lock to wait

To handle the nested donation, we set up a loop to donate current thread's
to its holder and its holder's holder, etc. When the depth of nested donation
is deeper than MAX_DEPTH, it will stop the loop.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

(1) The thread check it's donation list and remove all threads that wait for 
    the lock 
(2) Recalculate the priority of current thread, as the previous doantor with 
    highest might be removed
(3) If any threads in ready list get higher priority than current thread,
    preempt the current thread. 

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

The thread_set_priority() function pass the variable "priority" value to
current thread. If interrupt happens, Interrupt handler might preempt the 
running thread or change the value of variable. Then we get wrong input.

Interrupt handlers could not occupy resource, so I can't use a lock to avoid 
this race.

The way to avoid it is to disable the interrupt when running the 
thread_set_priority().
---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We choose this design is because this design is efficient. Becasuse I have 
sorted the ready list and wa

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
